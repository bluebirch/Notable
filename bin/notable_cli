#!/usr/bin/perl

use Modern::Perl;
use utf8;
use open qw(:encoding(UTF-8) :std);
use locale;
use Encode qw(decode_utf8);
use Config::Tiny;
use Getopt::Long;
use Notable;
use Text::ASCIITable;
#use YAML::PP;
use Data::Dumper;

# Usage
sub usage {
    my $exit = shift;
    print "Usage: $0 <command> [options]\n";
    exit $exit if ($exit);
}

# Read configuration file (if there is one).
my $Config = Config::Tiny->new;
foreach my $ConfigFile ( $ENV{HOME} . '/.config/notable_cli/config', $ENV{HOME} . '/.notable_cli' ) {
    if ( -f $ConfigFile ) {
        $Config = Config::Tiny->read( $ConfigFile, 'utf8' );
        last;
    }
}

# Notable data directory, defaults to $HOME/.notable.
my $DataDir = $Config->{_}->{datadir} ? $Config->{_}->{datadir} : $ENV{HOME} . '/.notable';

# Make sure command line is interpreted as UTF-8. Will break things on Windows.
@ARGV = map { decode_utf8( $_, 1 ) } @ARGV;

# Parse command line
my @Notebooks;
my @Tags;
my $Verbose;
my $Debug;
my $MaxTitleWidth = 50;
my $PandocOptions = $Config->{pandoc}->{options} ? $Config->{pandoc}->{options} : '--pdf-engine=xelatex';
my $Destination;

GetOptions(
    "dir=s"      => \$DataDir,
    "notebook=s" => \@Notebooks,
    "tag=s"      => \@Tags,
    "verbose"    => \$Verbose,
    "debug"      => \$Debug,
    "destination=s" => \$Destination
) or usage(2);

# Expand ~ in $DataDir and $PandocOptions
$DataDir       =~ s/~/$ENV{HOME}/ge;
$PandocOptions =~ s/~/$ENV{HOME}/ge;

# Debugging things
if ($Debug) {
    $Verbose = $Notable::DEBUG = 1;
}

# create Notable object
my $notable = Notable->new($DataDir);

# check that everything is ok
unless ( $notable->ok ) {
    say STDERR "Error: ", $notable->error;
    exit 255;
}

# What's left on the command line now should be a command
my $Command = shift @ARGV;

# Quit if it isn't
unless ($Command) {
    usage(2);
}

# ls or list
if ( $Command =~ m/^(?:ls|list)/ ) {

    say "ls" if ($Debug);

    # use rest of command line as search string
    my $TitleRegex = join( " ", @ARGV );
    my @notes      = $notable->select( title => $TitleRegex, tag => \@Tags, notebook => \@Notebooks );
    my $t          = Text::ASCIITable->new( { headingText => 'Notable' } );
    $t->setCols( 'Title', 'Notebook', 'Created', 'Modified' );

    # make a sweep to see if any title is longer than $MaxTitleWidth. If that
    # is the case, draw a line between every entry in the table becasue titles
    # will be wrapped.
    foreach my $note (@notes) {
        if ( length( $note->title ) > $MaxTitleWidth ) {
            $t->setOptions( drawRowLine => 1 );
            last;
        }
    }
    $t->setColWidth( 'Title', $MaxTitleWidth );
    foreach my $note (@notes) {
        $t->addRow( $note->title, join( ', ', $note->notebooks ), $note->created_ymd, $note->modified_ymd );
    }
    print $t;
}

# Copy notes to other Notable directory
elsif ( $Command =~ m/^(?:copy)/ ) {

    if (!$Destination) {
        say STDERR "copy requires `--destination`";
        exit 255;
    }
    elsif (! -d $Destination) {
        say STDERR "$Destination must be a directory";
        exit 255;
    }

    # Create destination thing
    my $dest_notable = Notable->new( $Destination );

    if (!$dest_notable) {
        say STDERR "$Destination must be a valid Notable directory";
        exit 255;
    }

    my $TitleRegex = join( " ", @ARGV );
    my @notes      = $notable->select( title => $TitleRegex, tag => \@Tags, notebook => \@Notebooks );

}

elsif ( $Command =~ m/^(?:links)/ ) {
    my $TitleRegex = join( " ", @ARGV );
    my @notes      = $notable->select( title => $TitleRegex, tag => \@Tags, notebook => \@Notebooks );

    #my $t          = Text::ASCIITable->new( { headingText => 'Links' } );

    foreach my $note (@notes) {
        print $note->title, ":\n";
        foreach my $link ( $note->links ) {
            print "  $link\n";
        }
    }
}
elsif ( $Command =~ m/^(?:attach)/i ) {
    my $SubCommand = shift @ARGV;
    if ( $SubCommand =~ m/^orphan/i ) {
        my $foo = $notable->linked_attachments;
        print Dumper $foo;
    }
    elsif ( $SubCommand =~ m/^(?:ls|list)/i ) {
        my $TitleRegex = join( " ", @ARGV );
        my @notes      = $notable->select( title => $TitleRegex, tag => \@Tags, notebook => \@Notebooks );

        #my $t          = Text::ASCIITable->new( { headingText => 'Links' } );

        foreach my $note (@notes) {
            print $note->title, ":\n";
            foreach my $attachment ( $note->attachments ) {
                print "  $attachment\n";
            }
        }
    }
    else {
        die "wrong";
    }
}
elsif ( $Command =~ m/^(?:print|pdf)/i ) {

    # Get notes
    my $TitleRegex = join( " ", @ARGV );
    my @notes      = $notable->select( title => $TitleRegex, tag => \@Tags, notebook => \@Notebooks );

    # Pipe notes through pandoc
    foreach my $note (@notes) {
        my $pdf = $note->filename;
        $pdf =~ s/\.md$/.pdf/i;
        print "writing $pdf\n";

        # Get properties
        my $properties = $note->properties;

        # Set date
        $properties->{date} = $note->modified->ymd();

        # Get note content
        my $content = $note->content;

        # remove level 1 heading
        $content =~ s:^#\s+(.*)$::m;
        $properties->{title} = $1 if ($1);

        # decrease all other headings one level
        $content =~ s:^#(?=#)::mg;

        # join YAML header and contents
        my $s = Dump($properties) . "...\n\n" . $content;

        # pipe to pandoc
        open PANDOC, "| pandoc -f markdown $PandocOptions -o \"$pdf\"";
        print PANDOC $s;
        close PANDOC;
    }
}
else {
    print "Unknown command $Command.\n";
    usage(2);
}

# Close data directory
$notable->close_dir();
